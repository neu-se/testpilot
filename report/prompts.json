{
  "metaData": {
    "packageName": "zip-a-folder",
    "useDocSnippets": true,
    "useCodeSnippets": false,
    "numSnippets": "all",
    "snippetLength": 20,
    "numCompletions": 5
  },
  "prompts": [
    {
      "id": 0,
      "file": "prompt_0.js",
      "temperature": 0,
      "completions": [
        "let folderPath = './testFolder';\nlet zipPath = './testFolder.zip';\n\nbefore(function() {\n  // Create a test folder with some files\n  fs.mkdirSync(folderPath);\n  fs.writeFileSync(`${folderPath}/file1.txt`, 'Hello World!');\n  fs.writeFileSync(`${folderPath}/file2.txt`, 'Hello Again!');\n});\n\nafter(function() {\n  // Clean up the test folder and zip file\n  fs.rmdirSync(folderPath, { recursive: true });\n  fs.unlinkSync(zipPath);\n});\n\nit('test zip-a-folder', function(done) {\n  zip_a_folder.zipFolder(folderPath, zipPath, function(err) {\n    assert.ifError(err);\n    assert.ok(fs.existsSync(zipPath));\n    done();\n  });\n});"
      ],
      "tests": [
        "test_0.js"
      ],
      "provenance": []
    },
    {
      "id": 1,
      "file": "prompt_1.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder', function(done) {\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-folder.zip';\n\n        // Create a test folder with some files\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello World!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'Hello Again');\n\n        zip_a_folder.zip(srcFolder, zipFilePath)\n            .then(() => {\n                // Check if the zip file exists\n                assert(fs.existsSync(zipFilePath));\n\n                // Check the contents of the zip file\n                const zip = new require('jszip')();\n                return zip.loadAsync(fs.readFileSync(zipFilePath));\n            })\n            .then(zip => {\n                assert(zip.file('file1.txt'));\n                assert(zip.file('file2.txt'));\n                done();\n            })\n            .catch(err => {\n                console.error(err);\n                done(err);\n            });\n\n        // Clean up\n        after(() => {\n            fs.unlinkSync(zipFilePath);\n            fs.rmdirSync(srcFolder, { recursive: true });\n        });\n    });\n});"
      ],
      "tests": [
        "test_1.js"
      ],
      "provenance": [
        {
          "originalPrompt": 0,
          "test": 0,
          "refiner": "FunctionBodyIncluder"
        },
        {
          "originalPrompt": 3,
          "test": 3,
          "refiner": "FunctionBodyIncluder"
        }
      ]
    },
    {
      "id": 2,
      "file": "prompt_2.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder', function(done) {\n        const fs = require('fs');\n        const path = require('path');\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-folder.zip';\n\n        // Create a test folder with some files\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello World!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'Hello Again');\n\n        zip_a_folder.zip(srcFolder, zipFilePath)\n            .then(() => {\n                // Check if the zip file exists\n                assert(fs.existsSync(zipFilePath));\n\n                // Check the contents of the zip file\n                const zip = new require('jszip')();\n                return zip.loadAsync(fs.readFileSync(zipFilePath));\n            })\n            .then(zip => {\n                assert(zip.file('file1.txt'));\n                assert(zip.file('file2.txt'));\n                done();\n            })\n            .catch(err => {\n                console.error(err);\n                done(err);\n            });\n\n        // Clean up\n        after(() => {\n            fs.unlinkSync(zipFilePath);\n            fs.rmdirSync(srcFolder, { recursive: true });\n        });\n    });\n});"
      ],
      "tests": [
        "test_2.js"
      ],
      "provenance": [
        {
          "originalPrompt": 1,
          "test": 1,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 3,
      "file": "prompt_3.js",
      "temperature": 0,
      "completions": [
        "let mocha = require('mocha');\nlet assert = require('assert');\nlet zip_a_folder = require('zip-a-folder');\nlet fs = require('fs');\n\ndescribe('test zip_a_folder', function() {\n  let folderPath = './testFolder';\n  let zipPath = './testFolder.zip';\n\n  before(function(done) {\n    // Create a test folder with some files\n    fs.mkdirSync(folderPath);\n    fs.writeFileSync(`${folderPath}/file1.txt`, 'Hello World!');\n    fs.writeFileSync(`${folderPath}/file2.txt`, 'Hello Again!');\n    done();\n  });\n\n  after(function(done) {\n    // Clean up the test folder and zip file\n    fs.rmdirSync(folderPath, { recursive: true });\n    fs.unlinkSync(zipPath);\n    done();\n  });\n\n  it('test zip-a-folder', function(done) {\n    zip_a_folder.zipFolder(folderPath, zipPath, function(err) {\n      assert.ifError(err);\n      assert.ok(fs.existsSync(zipPath));\n      done();\n    });\n  });\n});"
      ],
      "tests": [
        "test_3.js"
      ],
      "provenance": [
        {
          "originalPrompt": 0,
          "test": 0,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 4,
      "file": "prompt_4.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        let srcFolder = './test-folder';\n        let zipFilePath = './test-folder.zip';\n\n        // Create a test folder with some files\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello, world!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'This is a test.');\n\n        // Zip the folder\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            // Check if the zip file exists\n            assert.ok(fs.existsSync(zipFilePath));\n\n            // Unzip the file to a temporary folder\n            let unzipFolder = './unzip-folder';\n            fs.mkdirSync(unzipFolder);\n            let unzip = require('unzip');\n            fs.createReadStream(zipFilePath).pipe(unzip.Extract({ path: unzipFolder }));\n\n            // Check if the files are correctly unzipped\n            assert.ok(fs.existsSync(`${unzipFolder}/file1.txt`));\n            assert.ok(fs.existsSync(`${unzipFolder}/file2.txt`));\n\n            // Clean up\n            fs.rmSync(zipFilePath, { force: true });\n            fs.rmdirSync(unzipFolder, { recursive: true });\n            fs.rmdirSync(srcFolder, { recursive: true });\n\n            done();\n        }).catch((err) => {\n            console.error(err);\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_4.js"
      ],
      "provenance": []
    },
    {
      "id": 5,
      "file": "prompt_5.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-folder.zip';\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            assert.ok(fs.existsSync(zipFilePath));\n            done();\n        }).catch((err) => {\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_5.js"
      ],
      "provenance": [
        {
          "originalPrompt": 4,
          "test": 4,
          "refiner": "FunctionBodyIncluder"
        },
        {
          "originalPrompt": 9,
          "test": 9,
          "refiner": "FunctionBodyIncluder"
        }
      ]
    },
    {
      "id": 6,
      "file": "prompt_6.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        const fs = require('fs'); // add this line to define fs\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-folder.zip';\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            assert.ok(fs.existsSync(zipFilePath));\n            done();\n        }).catch((err) => {\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_6.js"
      ],
      "provenance": [
        {
          "originalPrompt": 5,
          "test": 5,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 7,
      "file": "prompt_7.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        const srcFolder = './test_folder';\n        const zipFilePath = './archive.zip';\n\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            assert.ok(fs.existsSync(zipFilePath));\n            fs.unlinkSync(zipFilePath);\n            done();\n        }).catch((err) => {\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_7.js"
      ],
      "provenance": [
        {
          "originalPrompt": 6,
          "test": 6,
          "refiner": "SnippetIncluder"
        },
        {
          "originalPrompt": 5,
          "test": 5,
          "refiner": "SnippetIncluder"
        },
        {
          "originalPrompt": 10,
          "test": 10,
          "refiner": "FunctionBodyIncluder"
        },
        {
          "originalPrompt": 11,
          "test": 11,
          "refiner": "FunctionBodyIncluder"
        }
      ]
    },
    {
      "id": 8,
      "file": "prompt_8.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        const fs = require('fs'); // add this line\n        const srcFolder = './test_folder';\n        const zipFilePath = './archive.zip';\n\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            assert.ok(fs.existsSync(zipFilePath));\n            fs.unlinkSync(zipFilePath);\n            done();\n        }).catch((err) => {\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_8.js"
      ],
      "provenance": [
        {
          "originalPrompt": 7,
          "test": 7,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 9,
      "file": "prompt_9.js",
      "temperature": 0,
      "completions": [
        "let mocha = require('mocha');\nlet assert = require('assert');\nlet zip_a_folder = require('zip-a-folder');\nlet fs = require('fs'); // Add this line to require the fs module\nlet unzip = require('unzip');\n\ndescribe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        let srcFolder = './test-folder';\n        let zipFilePath = './test-folder.zip';\n\n        // Create a test folder with some files\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello, world!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'This is a test.');\n\n        // Zip the folder\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            // Check if the zip file exists\n            assert.ok(fs.existsSync(zipFilePath));\n\n            // Unzip the file to a temporary folder\n            let unzipFolder = './unzip-folder';\n            fs.mkdirSync(unzipFolder);\n            fs.createReadStream(zipFilePath).pipe(unzip.Extract({ path: unzipFolder }));\n\n            // Check if the files are correctly unzipped\n            assert.ok(fs.existsSync(`${unzipFolder}/file1.txt`));\n            assert.ok(fs.existsSync(`${unzipFolder}/file2.txt`));\n\n            // Clean up\n            fs.rmSync(zipFilePath, { force: true });\n            fs.rmdirSync(unzipFolder, { recursive: true });\n            fs.rmdirSync(srcFolder, { recursive: true });\n\n            done();\n        }).catch((err) => {\n            console.error(err);\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_9.js"
      ],
      "provenance": [
        {
          "originalPrompt": 4,
          "test": 4,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 10,
      "file": "prompt_10.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-archive.zip';\n\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            assert.ok(fs.existsSync(zipFilePath));\n            done();\n        }).catch((err) => {\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_10.js"
      ],
      "provenance": [
        {
          "originalPrompt": 9,
          "test": 9,
          "refiner": "SnippetIncluder"
        },
        {
          "originalPrompt": 4,
          "test": 4,
          "refiner": "SnippetIncluder"
        }
      ]
    },
    {
      "id": 11,
      "file": "prompt_11.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zip', function(done) {\n        const fs = require('fs'); // add this line to require fs\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-archive.zip';\n\n        zip_a_folder.zip(srcFolder, zipFilePath).then(() => {\n            assert.ok(fs.existsSync(zipFilePath));\n            done();\n        }).catch((err) => {\n            done(err);\n        });\n    });\n});"
      ],
      "tests": [
        "test_11.js"
      ],
      "provenance": [
        {
          "originalPrompt": 10,
          "test": 10,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 12,
      "file": "prompt_12.js",
      "temperature": 0,
      "completions": [
        "let mocha = require('mocha');\nlet assert = require('assert');\nlet zip_a_folder = require('zip-a-folder');\n\ndescribe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        let srcFolder = './test_folder'; // replace with your source folder\n        let zipFilePath = './test_folder.zip'; // replace with your desired zip file path\n\n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                assert.fail(err);\n            } else {\n                assert.ok(fs.existsSync(zipFilePath));\n                fs.unlinkSync(zipFilePath); // remove the zip file after test\n                done();\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_12.js"
      ],
      "provenance": []
    },
    {
      "id": 13,
      "file": "prompt_13.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-folder.zip';\n\n        // Create a test folder with some files\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello World!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'Hello Again');\n\n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                done(err);\n            } else {\n                // Check if the zip file exists\n                fs.access(zipFilePath, fs.constants.F_OK, (err) => {\n                    if (err) {\n                        done(err);\n                    } else {\n                        // Check if the zip file is not empty\n                        fs.stat(zipFilePath, (err, stats) => {\n                            if (err) {\n                                done(err);\n                            } else if (stats.size === 0) {\n                                done(new Error('Zip file is empty'));\n                            } else {\n                                done();\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_13.js"
      ],
      "provenance": [
        {
          "originalPrompt": 12,
          "test": 12,
          "refiner": "FunctionBodyIncluder"
        },
        {
          "originalPrompt": 17,
          "test": 17,
          "refiner": "FunctionBodyIncluder"
        }
      ]
    },
    {
      "id": 14,
      "file": "prompt_14.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        const fs = require('fs'); // Add this line\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-folder.zip';\n\n        // Create a test folder with some files\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello World!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'Hello Again');\n\n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                done(err);\n            } else {\n                // Check if the zip file exists\n                fs.access(zipFilePath, fs.constants.F_OK, (err) => {\n                    if (err) {\n                        done(err);\n                    } else {\n                        // Check if the zip file is not empty\n                        fs.stat(zipFilePath, (err, stats) => {\n                            if (err) {\n                                done(err);\n                            } else if (stats.size === 0) {\n                                done(new Error('Zip file is empty'));\n                            } else {\n                                done();\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_14.js"
      ],
      "provenance": [
        {
          "originalPrompt": 13,
          "test": 13,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 15,
      "file": "prompt_15.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-archive.zip';\n\n        // Create a test folder and add some files to it\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello World!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'Hello Again');\n\n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                assert.fail(err);\n            } else {\n                // Check if the zip file exists\n                fs.access(zipFilePath, fs.constants.F_OK, (err) => {\n                    assert.ifError(err);\n                    done();\n                });\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_15.js"
      ],
      "provenance": [
        {
          "originalPrompt": 14,
          "test": 14,
          "refiner": "SnippetIncluder"
        },
        {
          "originalPrompt": 13,
          "test": 13,
          "refiner": "SnippetIncluder"
        },
        {
          "originalPrompt": 18,
          "test": 18,
          "refiner": "FunctionBodyIncluder"
        },
        {
          "originalPrompt": 19,
          "test": 19,
          "refiner": "FunctionBodyIncluder"
        }
      ]
    },
    {
      "id": 16,
      "file": "prompt_16.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        const fs = require('fs');\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-archive.zip';\n\n        // Create a test folder and add some files to it\n        fs.mkdirSync(srcFolder);\n        fs.writeFileSync(`${srcFolder}/file1.txt`, 'Hello World!');\n        fs.writeFileSync(`${srcFolder}/file2.txt`, 'Hello Again');\n\n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                assert.fail(err);\n            } else {\n                // Check if the zip file exists\n                fs.access(zipFilePath, fs.constants.F_OK, (err) => {\n                    assert.ifError(err);\n                    done();\n                });\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_16.js"
      ],
      "provenance": [
        {
          "originalPrompt": 15,
          "test": 15,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 17,
      "file": "prompt_17.js",
      "temperature": 0,
      "completions": [
        "let mocha = require('mocha');\nlet assert = require('assert');\nlet fs = require('fs'); // Add this line\nlet zip_a_folder = require('zip-a-folder');\n\ndescribe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        let srcFolder = './test_folder'; // replace with your source folder\n        let zipFilePath = './test_folder.zip'; // replace with your desired zip file path\n\n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                assert.fail(err);\n            } else {\n                assert.ok(fs.existsSync(zipFilePath));\n                fs.unlinkSync(zipFilePath); // remove the zip file after test\n                done();\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_17.js"
      ],
      "provenance": [
        {
          "originalPrompt": 12,
          "test": 12,
          "refiner": "RetryWithError"
        }
      ]
    },
    {
      "id": 18,
      "file": "prompt_18.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-archive.zip';\n        \n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                assert.fail(err);\n            } else {\n                assert.ok(fs.existsSync(zipFilePath));\n                fs.unlinkSync(zipFilePath);\n                done();\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_18.js"
      ],
      "provenance": [
        {
          "originalPrompt": 17,
          "test": 17,
          "refiner": "SnippetIncluder"
        },
        {
          "originalPrompt": 12,
          "test": 12,
          "refiner": "SnippetIncluder"
        }
      ]
    },
    {
      "id": 19,
      "file": "prompt_19.js",
      "temperature": 0,
      "completions": [
        "describe('test zip_a_folder', function() {\n    it('test zip-a-folder.zipFolder', function(done) {\n        const fs = require('fs'); // Add this line to define fs\n        const srcFolder = './test-folder';\n        const zipFilePath = './test-archive.zip';\n        \n        zip_a_folder.zipFolder(srcFolder, zipFilePath, function(err) {\n            if (err) {\n                assert.fail(err);\n            } else {\n                assert.ok(fs.existsSync(zipFilePath));\n                fs.unlinkSync(zipFilePath);\n                done();\n            }\n        });\n    });\n});"
      ],
      "tests": [
        "test_19.js"
      ],
      "provenance": [
        {
          "originalPrompt": 18,
          "test": 18,
          "refiner": "RetryWithError"
        }
      ]
    }
  ]
}