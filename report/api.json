[
  {
    "accessPath": "zip-a-folder",
    "descriptor": {
      "type": "function",
      "signature": "()",
      "implementation": "class ZipAFolder {\n    static async zip(srcFolder, zipFilePath) {\n        const targetBasePath = path.dirname(zipFilePath);\n\n        if (targetBasePath === srcFolder) {\n            throw new Error('Source and target folder must be different.');\n        }\n        return new Promise((resolve, reject) => {\n            ZipAFolder.zipFolder(srcFolder, zipFilePath, err => {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    static zipFolder(srcFolder, zipFilePath, callback) {\n        // folder double check\n        fs.access(srcFolder, fs.constants.F_OK, (notExistingError) => {\n            if (notExistingError) {\n                return callback(notExistingError);\n            }\n            fs.access(path.dirname(zipFilePath), fs.constants.F_OK, (notExistingError) => {\n                if (notExistingError) {\n                    return callback(notExistingError);\n                }\n                var output = fs.createWriteStream(zipFilePath);\n                var zipArchive = archiver('zip');\n\n                output.on('close', function() {\n                    callback();\n                });\n\n                zipArchive.pipe(output);\n                zipArchive.directory(srcFolder, false);\n                zipArchive.finalize();\n            });\n        });\n    }\n}",
      "isAsync": false,
      "isConstructor": true
    },
    "packageName": "zip-a-folder"
  },
  {
    "accessPath": "zip-a-folder.zip",
    "descriptor": {
      "type": "function",
      "signature": "(srcFolder, zipFilePath)",
      "implementation": "async zip(srcFolder, zipFilePath) {\n        const targetBasePath = path.dirname(zipFilePath);\n\n        if (targetBasePath === srcFolder) {\n            throw new Error('Source and target folder must be different.');\n        }\n        return new Promise((resolve, reject) => {\n            ZipAFolder.zipFolder(srcFolder, zipFilePath, err => {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n    }",
      "isAsync": true,
      "isConstructor": false
    },
    "packageName": "zip-a-folder"
  },
  {
    "accessPath": "zip-a-folder.zipFolder",
    "descriptor": {
      "type": "function",
      "signature": "(srcFolder, zipFilePath, callback)",
      "implementation": "zipFolder(srcFolder, zipFilePath, callback) {\n        // folder double check\n        fs.access(srcFolder, fs.constants.F_OK, (notExistingError) => {\n            if (notExistingError) {\n                return callback(notExistingError);\n            }\n            fs.access(path.dirname(zipFilePath), fs.constants.F_OK, (notExistingError) => {\n                if (notExistingError) {\n                    return callback(notExistingError);\n                }\n                var output = fs.createWriteStream(zipFilePath);\n                var zipArchive = archiver('zip');\n\n                output.on('close', function() {\n                    callback();\n                });\n\n                zipArchive.pipe(output);\n                zipArchive.directory(srcFolder, false);\n                zipArchive.finalize();\n            });\n        });\n    }",
      "isAsync": false,
      "isConstructor": false
    },
    "packageName": "zip-a-folder"
  }
]